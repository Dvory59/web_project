<?php
/**
 * @author sczdavos
 * @email sczdavos@gmail.com
 * @site sczdavos.eu
 */

namespace App\FrontModule\Presenters;

use App\Forms\ICommentsFormFactory;
use App\Model\ArticleManager;
use App\Model\CommentManager;
use Nette\Application\UI\Presenter;
use Nette\Forms\Form;
use IPub\VisualPaginator\Components as VisualPaginator;


class NewsPresenter extends BasePresenter
{
	private $id;


	private $articles = array();


	/**
	 * @var ArticleManager
	 */
	public $articleManager;



	public function __construct(ArticleManager $articleManager)
	{

		$this->articleManager = $articleManager;

	}

	/** Vytváří componentu Paginator na stránkování */
	protected function createComponentVisualPaginator()
	{
		$control = new VisualPaginator\Control;

		$control->setTemplateFile(__DIR__ . "/../templates/Paginator/paginator.latte");
		$control->disableAjax();

		return $control;
	}

	/** Vkládá do všech šablony News boční News list */
	public function beforeRender()
	{
		parent::beforeRender(); // TODO: Change the autogenerated stub

		if ($this->articles!= NULL)
		{
			$this->template->sideList = $this->articleManager->getArticlesSideBarList();
		}

	}

	/** Zavolá publikované články a vloží je do proměnné $articles*/
	public function actionList()
	{
		$this->articles = $this->articleManager->getDraftedNews();
	}

	/** Vykresluje list článků podle proměnné $articles (volá Paginator na stránkování) */
	public function renderList($searchDetect, $foundArray)
	{
		$allPosts = $this->articles;
		$visualPaginator = $this['visualPaginator'];
		$paginator = $visualPaginator->getPaginator();
		$paginator->itemsPerPage = 4;
		$paginator->itemCount = $allPosts->count();

		$allPosts->limit($paginator->itemsPerPage, $paginator->offset);

		$this->template->articles = $allPosts;

	}

	/** Vykreslí detail článku */
	public function renderDetail($id)
	{
		$this->id = $id;
		$this->template->article = $this->articleManager->getArticlebyID($id);
		$this->template->sideList = $this->articleManager->getArticlesSideBarList();

	}

	/** Vykreslí komponentu formuláře na vyhledávání v článcích */
	protected function createComponentSearchBar($name)
	{


		$form = new \Nette\Application\UI\Form();
		$form->addText('searchKey', 'Search Key');
		$form->addSubmit('search', 'Search');
		$form->onSuccess[] = [$this, 'handleSearchBar'];
		return $form;
	}

	/** Funkce zavolaná po odeslání vyhledávacího formuláře */
	function handleSearchBar($form, $vals)
	{
		if (!$vals->searchKey)
		{
			$this->redirect('list');
		}

		if ($this->articleManager->articleSearch($vals->searchKey)->fetchAll())
		{
			$this->articles = $this->articleManager->articleSearch($vals->searchKey);


		}
		else
		{

			$this->flashMessage("Article was not found");
			$this->redirect('list');
		}


	}


}